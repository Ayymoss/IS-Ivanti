@inject ISnackbar SnackbarService
@inject AgentService AgentService

<MudDialog>
    <DialogContent>
        <MudStack Row="true" Class="justify-center">
            <MudPaper Elevation="2" Class="flex-initial">
                <MudList Dense="true" Color="Color.Dark" Class="list-container">
                    <MudListSubheader>Selected (@Agents.Count)</MudListSubheader>
                    @foreach (var agent in Agents)
                    {
                        <MudListItem Class="list-item" Text="@agent.MachineName" Icon="@Icons.Material.Filled.Computer"/>
                    }
                </MudList>
            </MudPaper>
            <MudDivider Vertical="true" FlexItem="true" Light="true" DividerType="DividerType.Middle"/>
            <MudPaper Elevation="2" Class="flex-initial">
                <MudStack Class="flex-initial">
                    @if (_policies?.Count is 0)
                    {
                        <MudText>Policies loading...</MudText>
                    }
                    else
                    {
                        <MudList Dense="true" Clickable="true" @bind-SelectedItem="_selectedItem" @bind-SelectedValue="_selectedValue" Class="list-container">
                            <MudListSubheader>Policies (@_policies?.Count)</MudListSubheader>
                            <MudListItem Class="list-item" Text="(Check-in) Force a check-in" Value="@("CHECKIN")"/>
                            @foreach (var policy in _policies?.OrderBy(x => x.TaskType))
                            {
                                <MudListItem Class="list-item" Text="@($"({policy.TaskType}) {policy.TaskName}")" Value="@(policy.TaskId)"/>
                            }
                        </MudList>
                    }
                </MudStack>
            </MudPaper>

        </MudStack>
        <MudElement Class="d-flex flex-column mb-3">
            <MudDivider FlexItem="true" DividerType="DividerType.Inset" Class="mx-n6 mb-4 mt-8"/>
            <MudElement Class="d-flex">
                <MudSpacer/>
                <MudButton Class="flex-shrink-1" Variant="Variant.Text" Size="Size.Small" OnClick="ToggleOpen">Close</MudButton>
                <MudButton Class="flex-shrink-1 ml-2"
                           Disabled="@_processing"
                           Variant="Variant.Outlined"
                           Size="Size.Small"
                           Color="Color.Error"
                           ButtonType="ButtonType.Submit"
                           OnClick="SendJob">
                    @if (_processing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                        <MudText Class="ms-2">Issuing...</MudText>
                    }
                    else
                    {
                        <MudText>Issue Jobs</MudText>
                    }
                </MudButton>
            </MudElement>
        </MudElement>
    </DialogContent>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public List<AgentDto> Agents { get; set; } = null!;

    private MudListItem? _selectedItem;
    private object? _selectedValue;
    private List<AgentPolicyDto>? _policies = new();
    private bool _processing;

    private void ToggleOpen() => MudDialog.Close();

    protected override async Task OnInitializedAsync()
    {
        if (!Agents.Any())
        {
            SnackbarService.Add("No agents selected...", Severity.Error);
            MudDialog.Close();
            return;
        }

        _policies = await AgentService.GetPoliciesAsync(Agents.First().MachineId);
    }

    private async Task SendJob()
    {
        if (_selectedValue is null)
        {
            SnackbarService.Add("Select a policy", Severity.Info);
            return;
        }

        _processing = true;
        SnackbarService.Add("Job created! Please wait!", Severity.Info);

        var actions = Agents.Select(x => new ActionDto
        {
            MachineId = x.MachineId,
            AgentName = x.MachineName,
            TaskId = _selectedValue.ToString(),
            TaskName = _selectedItem?.Text,
            TaskType = _selectedValue as string is "CHECKIN" ? TaskType.CheckIn : TaskType.Other
        }).ToList();

        var guids = await AgentService.PostExecuteJobsAsync(actions);

        if (guids is null)
        {
            SnackbarService.Add("Job request failed!", Severity.Error);
            _processing = false;
            return;
        }
        SnackbarService.Add($"Jobs queued! ({guids.Count}/{actions.Count})", Severity.Success);
        _processing = false;
    }

}
