@inject ISnackbar SnackbarService
@inject AgentService AgentService

<MudDialog>
    <DialogContent>
        <MudStack>
            <MudPaper Elevation="2" Class="flex-initial">
                @if (_policies?.Count is 0)
                {
                    <MudText Class="ma-4">There are no policies for this computer.</MudText>
                }
                else
                {
                    <MudList Class="list-container" Dense="true" Clickable="true" @bind-SelectedItem="_selectedItem" @bind-SelectedValue="_selectedValue">
                        <MudListSubheader>Policies (@(_policies?.Count + 1))</MudListSubheader>
                        <MudListItem Class="list-item" Text="(Check-in) Force a check-in" Value="@("CHECKIN")"/>
                        @foreach (var policy in _policies.OrderBy(x => x.TaskType))
                        {
                            <MudListItem Class="list-item" Text="@($"({policy.TaskType}) {policy.TaskName}")" Value="@(policy.TaskId)"/>
                        }
                    </MudList>
                }
            </MudPaper>
        </MudStack>
        <MudElement Class="d-flex flex-column mb-3">
            <MudDivider FlexItem="true" DividerType="DividerType.Inset" Class="mx-n6 mb-4 mt-8"/>
            <MudElement Class="d-flex">
                <MudSpacer/>
                <MudButton Class="flex-shrink-1" Variant="Variant.Text" Size="Size.Small" OnClick="ToggleOpen">Close</MudButton>
                <MudButton Class="flex-shrink-1 ml-2"
                           Disabled="@_processing"
                           Variant="Variant.Outlined"
                           Size="Size.Small"
                           Color="Color.Error"
                           ButtonType="ButtonType.Submit"
                           OnClick="SendJob">
                    @if (_processing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                        <MudText Class="ms-2">Issuing...</MudText>
                    }
                    else
                    {
                        <MudText>Issue Job</MudText>
                    }
                </MudButton>
            </MudElement>
        </MudElement>
    </DialogContent>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public AgentDto Agent { get; set; } = null!;

    private MudListItem? _selectedItem;
    private object? _selectedValue;
    private List<AgentPolicyDto>? _policies = new();
    private bool _processing;

    private void ToggleOpen() => MudDialog.Close();

    protected override async Task OnInitializedAsync()
    {
        _policies = await AgentService.GetPoliciesAsync(Agent.MachineId);
    }

    private async Task SendJob()
    {
        if (_selectedValue is null)
        {
            SnackbarService.Add("Select a policy", Severity.Info);
            return;
        }

        _processing = true;
        SnackbarService.Add("Job created! Please wait!", Severity.Info);

        var action = new ActionDto
        {
            MachineId = Agent.MachineId,
            AgentName = Agent.MachineName,
            TaskId = _selectedValue.ToString(),
            TaskName = _selectedItem.Text,
            TaskType = _selectedValue as string is "CHECKIN" ? TaskType.CheckIn : TaskType.Other
        };

        var guid = await AgentService.PostExecuteJobAsync(action);
        if (guid is null)
        {
            SnackbarService.Add("Job request failed!", Severity.Error);
            _processing = false;
            return;
        }
        SnackbarService.Add($"Job queued! ({guid[(guid.LastIndexOf('-') + 1)..]})", Severity.Success);
        _processing = false;
    }

}
