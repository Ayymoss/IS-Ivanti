@page "/Jobs"
@inject AgentService AgentService
@attribute [Authorize]

<PageTitle>Jobs | ISIvanti</PageTitle>

<MudStack Spacing="0">
    <MudPaper Elevation="2" Class="d-flex flex-row align-center pa-4 rounded-b-0">
        <MudText Typo="Typo.h4"
                 Align="Align.Center"
                 Class="mud-text-secondary mr-4">
            Jobs
        </MudText>
        <MudFab Color="Color.Info"
                Size="Size.Small"
                OnClick="OnRefreshButtonClick"
                StartIcon="@Icons.Material.Filled.Refresh"/>
        <MudSpacer/>
        <MudElement Class="ml-2 mt-0">
            <MudTextField T="string"
                          Placeholder="Filter"
                          Variant="Variant.Outlined"
                          ValueChanged="OnSearch"
                          AutoFocus="false"
                          Adornment="Adornment.End"
                          Margin="Margin.Dense"
                          AdornmentIcon="@Icons.Material.Filled.Search"/>
        </MudElement>
    </MudPaper>
    <MudTable Striped="true"
              HeaderClass="mud-theme-info"
              Outlined="false"
              Bordered="false"
              Loading="_loading"
              LoadingProgressColor="Color.Info"
              ServerData="@(new Func<TableState, Task<TableData<JobDto>>>(ServerReload))"
              Elevation="2"
              RowsPerPage="20"
              Dense="true"
              @ref="_table">
        <HeaderContent>
            <MudTh Class="py-2">
                <MudTableSortLabel SortLabel="Id" T="JobDto">ID</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortLabel="UserName" T="JobDto">Username</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortLabel="Target" T="JobDto">Target Machine</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortLabel="Action" T="JobDto">Action</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel InitialDirection="SortDirection.Descending" SortLabel="Created" T="JobDto">Started</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortLabel="Completed" T="JobDto">Completed</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortLabel="State" T="JobDto">State</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortLabel="StateResult" T="JobDto">Result</MudTableSortLabel>
            </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Guid.ToString()[(context.Guid.ToString().LastIndexOf('-') + 1)..]</MudTd>
            <MudTd DataLabel="UserName">@context.UserName</MudTd>
            <MudTd DataLabel="Target">@context.AgentName?.ToUpper()</MudTd>
            <MudTd DataLabel="Action">@context.TaskName</MudTd>
            <MudTd DataLabel="Created">@context.Created?.ToString("yyyy-MM-dd HH:mm:ss")</MudTd>
            <MudTd DataLabel="Completed">
                @if (context.Completed is null)
                {
                    <MudProgressLinear Indeterminate="true" Color="Color.Info" Rounded="true" Size="Size.Large"/>
                }
                else
                {
                    <MudText Typo="Typo.body2">@context.Completed?.ToString("yyyy-MM-dd HH:mm:ss")</MudText>
                }
            </MudTd>
            <MudTd DataLabel="State">@context.State</MudTd>
            <MudTd DataLabel="StateResult">@context.StateResult.StatusCodeToString()</MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText Class="my-4">No jobs found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager PageSizeOptions="new[] {20, 50, 100}"/>
        </PagerContent>
    </MudTable>
</MudStack>

@code {
    private MudTable<JobDto>? _table;
    private string? _searchString;
    private IEnumerable<JobDto>? _pagedData;
    private int _totalItems;
    private bool _loading = true;
    private Timer? _timer;

    protected override Task OnInitializedAsync()
    {
        _timer = new Timer(Callback, null, TimeSpan.FromSeconds(10), TimeSpan.FromSeconds(10));
        return base.OnInitializedAsync();
    }

    private async void Callback(object? _) => await RefreshTable();

    private async Task RefreshTable()
    {
        _loading = true;
        await InvokeAsync(() => _table!.ReloadServerData());
    }

    private async Task OnRefreshButtonClick()
    {
        await RefreshTable();
    }

    private async Task<TableData<JobDto>> ServerReload(TableState state)
    {
        var paginationQuery = new PaginationDto
        {
            Page = state.Page,
            PageSize = state.PageSize,
            SortLabel = state.SortLabel,
            SortDirection = (int)state.SortDirection,
            SearchString = _searchString,
        };

        var result = await AgentService.PostJobPagination(paginationQuery);
        _pagedData = result.Jobs?.ToArray();
        _totalItems = result.Count;
        _loading = false;
        return new TableData<JobDto> {TotalItems = _totalItems, Items = _pagedData};
    }

    private void OnSearch(string text)
    {
        _searchString = text;
        _table!.ReloadServerData();
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

}
