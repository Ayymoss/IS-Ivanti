@page "/AgentsNew"
@inject IDialogService DialogService
@inject AgentService AgentService
@attribute [Authorize]

<PageTitle>Agents | ISIvanti</PageTitle>



<MudStack Spacing="0">
    <MudPaper Elevation="2" Class="d-flex flex-row justify-content-between align-center pa-4 rounded-b-0">
        <MudText Typo="Typo.h4" Align="Align.Center" Class="mud-text-secondary">Agents</MudText>
        <MudElement Class="ml-2 mt-0">
            <MudTextField T="string"
                          Placeholder="Filter"
                          Variant="Variant.Outlined"
                          ValueChanged="OnSearch"
                          AutoFocus="false"
                          Adornment="Adornment.End"
                          Margin="Margin.Dense"
                          AdornmentIcon="@Icons.Material.Filled.Search"/>
        </MudElement>
    </MudPaper>
    
    <MudDataGrid T="AgentDto" 
                 Striped="true"
                 HeaderClass="mud-theme-info"
                 Outlined="true"
                 Loading="_loading"
                 LoadingProgressColor="Color.Info"
                 RowClick="AgentRowClickEvent"
                 HorizontalScrollbar="true"
                 ServerData="@(/*new Func<GridState>, Task<GridData<AgentDto>>>(ServerReload)*/)"
                 Elevation="2"
                 RowsPerPage="20"
                 Dense="true">
        <Columns>
            <PropertyColumn Property="x => x.MachineName" Title="Name"/>
            <PropertyColumn Property="x => x.ProductName" Title="OS"/>
            <PropertyColumn Property="x => x.ProductVersion" Title="SP"/>
            <PropertyColumn Property="x => x.AssignedGroup" Title="Group"/>
            <PropertyColumn Property="x => x.LastUpdated" Title="Updated"/>
            <PropertyColumn Property="x => x.PatchesMissing" Title="Missing"/>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="AgentDto"/>
        </PagerContent>
    </MudDataGrid>
    
    
    
    <MudTable Striped="true"
              HeaderClass="mud-theme-info"
              Outlined="false"
              Bordered="false"
              Loading="_loading"
              LoadingProgressColor="Color.Info"
              T="AgentDto"
              HorizontalScrollbar="true"
              Elevation="2"
              RowsPerPage="20"
              Dense="true"
              @ref="_table">
        <HeaderContent>
            <MudTh Class="py-2">
                <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortLabel="Name" T="AgentDto">Name</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortLabel="ProductName" T="AgentDto">OS</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortLabel="ProductVersion" T="AgentDto">SP</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortLabel="Group" T="AgentDto">Group</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortLabel="LastUpdated" T="AgentDto">Last Updated</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortLabel="MissingPatches" T="AgentDto">Missing/Total Patches</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortLabel="Percentage" T="AgentDto">Health</MudTableSortLabel>
            </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.MachineName.ToUpper()</MudTd>
            <MudTd DataLabel="ProductName">@context.ProductName</MudTd>
            <MudTd DataLabel="ProductVersion">@context.ProductVersion</MudTd>
            <MudTd DataLabel="AssignedGroup">@context.AssignedGroup</MudTd>
            <MudTd DataLabel="LastUpdated">@context.LastUpdated.Humanize()</MudTd>
            <MudTd DataLabel="MissingPatches">@context.PatchesMissing/@(context.PatchesMissing + context.PatchesInstalled)</MudTd>
            <MudTd DataLabel="Health">
                <MudProgressLinear Color="ProgressColor(context.PatchesInstalledPercentage)" Rounded="true" Size="Size.Large" Value="context.PatchesInstalledPercentage">
                    <MudText Typo="Typo.caption" Color="Color.Dark">@Math.Floor(context.PatchesInstalledPercentage)%</MudText>
                </MudProgressLinear>
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText Class="mb-8" Color="Color.Warning">No agents found.</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager PageSizeOptions="new[] {20, 50, 100}"/>
        </PagerContent>
    </MudTable>
</MudStack>


@code {
    private MudTable<AgentDto>? _table;
    private string? _searchString;
    private IEnumerable<AgentDto>? _pagedData;
    private int _totalItems;
    private bool _loading = true;

    private async Task<GridData<AgentDto>> ServerReload(GridState<AgentDto> state)
    {
        var paginationQuery = new PaginationDto
        {
            Page = state.Page,
            PageSize = state.PageSize,
            SortLabel = "",
            SortDirection = 1,
            SearchString = _searchString,
        };

        var result = await AgentService.PostAgentPagination(paginationQuery);
        _pagedData = result.Agents?.ToArray();
        _totalItems = result.Count;
        _loading = false;
        return new GridData<AgentDto> {TotalItems = _totalItems, Items = _pagedData};
    }

    private void OnSearch(string text)
    {
        _searchString = text;
        _table!.ReloadServerData();
    }

    private static Color ProgressColor(float number)
    {
        switch (number)
        {
            case < 50:
                return Color.Error;
            case < 90:
                return Color.Warning;
            case < 99:
                return Color.Info;
            case >= 99:
                return Color.Success;
        }
        return Color.Default;
    }

    private async Task AgentRowClickEvent(DataGridRowClickEventArgs<AgentDto> clickEvent)
    {
        var parameters = new DialogParameters
        {
            {"Agent", clickEvent.Item},
        };

        var options = new DialogOptions {CloseButton = true, FullWidth = true, MaxWidth = MaxWidth.Medium, CloseOnEscapeKey = true};
        var onlineState = clickEvent.Item.LastUpdated + TimeSpan.FromHours(2) > DateTimeOffset.UtcNow;
        var title = $"Actions for {clickEvent.Item.MachineName} - {(onlineState ? "Online" : "Offline")}";
        await DialogService.ShowAsync<AgentOptions>(title, parameters, options);
    }

}
