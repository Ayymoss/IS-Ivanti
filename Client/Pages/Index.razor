@page "/"
@inject ISnackbar Snackbar
@inject IApiService ApiLogic
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorageService


<PageTitle>Index</PageTitle>

<MudStack Spacing="2">
    <AuthorizeView>
        <Authorized>
            <MudPaper Class="pa-4">
                <MudText>Logged in as: @_name</MudText>
            </MudPaper>
        </Authorized>
        <NotAuthorized>
            <MudContainer MaxWidth="MaxWidth.Small">
                <MudPaper Class="pa-4">
                    <MudElement>
                        <MudText Align="Align.Center" Typo="Typo.h4">Login</MudText>
                        <MudTextField @bind-Value="_login.UserName"
                                      AutoFocus="false"
                                      Immediate="true"
                                      Label="User Name"
                                      Variant="Variant.Text"
                                      AdornmentIcon="@Icons.Material.Filled.Person"
                                      Adornment="Adornment.End"
                                      @onkeypress="OnKeyPress"
                                      AdornmentColor="Color.Info"/>
                        <MudTextField @bind-Value="_login.Password"
                                      AutoFocus="false"
                                      Immediate="true"
                                      Label="Password"
                                      Variant="Variant.Text"
                                      InputType="@_passwordInput"
                                      AdornmentIcon="@_passwordInputIcon"
                                      Adornment="Adornment.End"
                                      AdornmentColor="Color.Info"
                                      @onkeypress="OnKeyPress"
                                      OnAdornmentClick="ButtonPassword"
                                      AdornmentAriaLabel="Show Password"/>
                    </MudElement>
                    <MudElement Class="d-flex mt-4">
                        <MudButton Disabled="@_processing" Color="Color.Tertiary" Variant="Variant.Filled" ButtonType="ButtonType.Submit" OnClick="UserLogin">
                            @if (_processing)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                                <MudText Class="ms-2">Logging in...</MudText>
                            }
                            else
                            {
                                <MudText>Log In</MudText>
                            }
                        </MudButton>
                        @if (!string.IsNullOrEmpty(_error))
                        {
                            <MudText Class="align-self-center ml-2" Align="Align.Left" Color="Color.Warning" Typo="Typo.body1">Error: @_error</MudText>
                        }
                    </MudElement>
                </MudPaper>
            </MudContainer>
        </NotAuthorized>
    </AuthorizeView>
</MudStack>


@code
{
    private string? _error;
    private LoginRequestDto _login = new();
    private bool _processing;
    private bool _authorised;
    private bool _showPassword;
    private InputType _passwordInput = InputType.Password;
    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    private string _name = string.Empty;
    private string _identity = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        var user = (await (AuthStateProvider as CustomAuthStateProvider)!.GetAuthenticationStateAsync()).User;
        _identity = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        _name = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value;
    }


    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await UserLogin();
        }
    }

    private void ButtonPassword()
    {
        if (_showPassword)
        {
            _showPassword = false;
            _passwordInput = InputType.Password;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
        }
        else
        {
            _showPassword = true;
            _passwordInput = InputType.Text;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
        }
    }

    private async Task UserLogin()
    {
        _error = null;

        if (string.IsNullOrEmpty(_login.UserName) || _login.UserName.Length < 3 || _login.Password?.Length is < 3)
        {
            _error = "Invalid username/password length";
            return;
        }

        if (_login.UserName.Contains("@") || _login.UserName.Contains("\\"))
        {
            _error = "Username cannot contain @ or \\. \nDo not provide domain or server!";
            return;
        }

        _processing = true;
        var message = await ApiLogic.LoginAsync(_login);
        if (message == "Success")
        {
            await LocalStorageService.SetItemAsStringAsync("IsAuthenticated", "true");
            NavigationManager.NavigateTo(NavigationManager.Uri, true);
        }
        else
        {
            _error = "Invalid or unprivileged access";
            _processing = false;
        }
    }
}
