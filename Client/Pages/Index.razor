@page "/"
@inject IApiService ApiLogic
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorageService
@inject SentinelService SentinelService
@inject AgentService AgentService

<PageTitle>Index | ISI Patch</PageTitle>

<MudStack Spacing="2">
    <AuthorizeView>
        <Authorized>
            <MudContainer MaxWidth="MaxWidth.Medium">
                <MudStack>
                    <MudPaper Elevation="8" Class="pa-4">
                        <MudStack Class="justify-center align-center">
                            <MudText Typo="Typo.h4">Welcome, @CapitaliseName(_name)</MudText>
                            <MudDivider FlexItem="true" DividerType="DividerType.Middle" Light="true"/>
                            <MudText Typo="Typo.caption">Please report any issues to the Security Team</MudText>
                        </MudStack>
                    </MudPaper>
                    @if (_sentinelStatistics is not null && _ivantiStatistics is not null)
                    {
                        <MudPaper Elevation="8" Class="pa-4 mt-4">
                            <MudText Typo="Typo.h6" Align="Align.Center">Health</MudText>
                            <MudGrid Spacing="2" Justify="Justify.FlexStart">
                                <MudItem xs="12" sm="6">
                                    <MudPaper Class="d-flex justify-center flex-column align-self-center pa-4" Elevation="4">
                                        <MudText Typo="Typo.subtitle1" Color="Color.Info">@($"{_ivantiStatistics.MachinesUnderHealth:N0}")</MudText>
                                        <MudText Class="mud-text-secondary">Ivanti Healthy Machines</MudText>
                                    </MudPaper>
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudPaper Class="d-flex justify-center flex-column align-self-center pa-4" Elevation="4">
                                        <MudText Typo="Typo.subtitle1" Color="Color.Info">@($"{_sentinelStatistics.ActionRequiredCount:N0}")</MudText>
                                        <MudText Class="mud-text-secondary">Sentinel Actions Required</MudText>
                                    </MudPaper>
                                </MudItem>
                            </MudGrid>
                            <MudText Class="mt-4" Typo="Typo.h6" Align="Align.Center">Admin Statistics</MudText>
                            <MudGrid Spacing="2" Justify="Justify.FlexStart">
                                <MudItem xs="12" sm="6">
                                    <MudPaper Class="d-flex justify-center flex-column align-self-center pa-4" Elevation="4">
                                        <MudText Typo="Typo.subtitle1" Color="Color.Info">@($"{_ivantiStatistics.TotalAdminJobsSubmitted:N0}")</MudText>
                                        <MudText Class="mud-text-secondary">Ivanti Total Jobs Sent</MudText>
                                    </MudPaper>
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudPaper Class="d-flex justify-center flex-column align-self-center pa-4" Elevation="4">
                                        <MudText Typo="Typo.subtitle1" Color="Color.Info">@($"{_ivantiStatistics.UserAdminJobsSubmitted:N0}")</MudText>
                                        <MudText Class="mud-text-secondary">Ivanti Your Jobs Sent</MudText>
                                    </MudPaper>
                                </MudItem>
                            </MudGrid>
                            @if (_showChart)
                            {
                                <MudText Class="mt-4" Typo="Typo.h6" Align="Align.Center">Patch Health - Week</MudText>
                                <MudPaper Class="d-flex justify-center flex-column align-self-center pa-4" Elevation="4">
                                    <MudChart ChartType="ChartType.Line" ChartSeries="_series" XAxisLabels="_xAxisLabels" Width="100%" ChartOptions="_options">
                                        <CustomGraphics>
                                            <style>.mud-chart-line {overflow: visible;}</style>
                                        </CustomGraphics>
                                    </MudChart>
                                </MudPaper>
                            }
                        </MudPaper>
                    }
                </MudStack>
            </MudContainer>
        </Authorized>
        <NotAuthorized>
            <MudContainer MaxWidth="MaxWidth.Small">
                <MudPaper Class="pa-4">
                    <MudElement>
                        <MudText Align="Align.Center" Typo="Typo.h4">Login</MudText>
                        <MudTextField @bind-Value="_login.UserName"
                                      AutoFocus="true"
                                      Immediate="true"
                                      Label="Username"
                                      Variant="Variant.Text"
                                      AdornmentIcon="@Icons.Material.Filled.Person"
                                      Adornment="Adornment.End"
                                      @onkeypress="OnKeyPress"
                                      AdornmentColor="Color.Info"/>
                        <MudTextField @bind-Value="_login.Password"
                                      AutoFocus="false"
                                      Immediate="true"
                                      Label="Password"
                                      Variant="Variant.Text"
                                      InputType="@_passwordInput"
                                      AdornmentIcon="@_passwordInputIcon"
                                      Adornment="Adornment.End"
                                      AdornmentColor="Color.Info"
                                      @onkeypress="OnKeyPress"
                                      OnAdornmentClick="ButtonPassword"
                                      AdornmentAriaLabel="Show Password"/>
                    </MudElement>
                    <MudElement Class="d-flex mt-4">
                        <MudButton Disabled="@_processing" Color="Color.Tertiary" Variant="Variant.Filled" ButtonType="ButtonType.Submit" OnClick="UserLogin">
                            @if (_processing)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                                <MudText Class="ms-2">Logging in...</MudText>
                            }
                            else
                            {
                                <MudText>Log In</MudText>
                            }
                        </MudButton>
                        @if (!string.IsNullOrEmpty(_error))
                        {
                            <MudText Class="align-self-center ml-2" Align="Align.Left" Color="Color.Warning" Typo="Typo.body1">Error: @_error</MudText>
                        }
                    </MudElement>
                </MudPaper>
            </MudContainer>
        </NotAuthorized>
    </AuthorizeView>
</MudStack>


@code
{
    // Mud Chart
    private readonly ChartOptions _options = new();
    private readonly List<ChartSeries> _series = new();
    private string[]? _xAxisLabels;
    private bool _showChart;

    // Normals
    private string? _error;
    private LoginRequestDto _login = new();
    private SentinelStatisticsDto? _sentinelStatistics;
    private IvantiStatisticsDto? _ivantiStatistics;
    private bool _processing;
    private bool _authorised;
    private bool _showPassword;
    private InputType _passwordInput = InputType.Password;
    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    private string _name = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var user = (await (AuthStateProvider as CustomAuthStateProvider)!.GetAuthenticationStateAsync()).User;
        _name = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value;
        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            _sentinelStatistics = await SentinelService.GetStatistics() ?? new SentinelStatisticsDto();
            _ivantiStatistics = await AgentService.GetStatistics() ?? new IvantiStatisticsDto();

            _options.InterpolationOption = InterpolationOption.NaturalSpline;
            var data = _ivantiStatistics.HealthyChartAverage.Select(d => (double)d.Average).ToArray();
            if (data.Length > 3)
            {
                _showChart = true;
                _series.Add(new ChartSeries
                {
                    Name = "Machines",
                    Data = data
                });
                _xAxisLabels = _ivantiStatistics.HealthyChartAverage.Select(x => $"{x.Week}").ToArray();
            }
        }
    }

    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await UserLogin();
        }
    }

    private void ButtonPassword()
    {
        if (_showPassword)
        {
            _showPassword = false;
            _passwordInput = InputType.Password;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
        }
        else
        {
            _showPassword = true;
            _passwordInput = InputType.Text;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
        }
    }

    private async Task UserLogin()
    {
        _error = null;

        if (string.IsNullOrEmpty(_login.UserName) || _login.UserName.Length < 3 || _login.Password?.Length is < 3)
        {
            _error = "Invalid username/password length";
            return;
        }

        if (_login.UserName.Contains("@") || _login.UserName.Contains("\\"))
        {
            _error = "Username cannot contain @ or \\. \nDo not provide domain or server!";
            return;
        }

        _processing = true;
        var message = await ApiLogic.LoginAsync(_login);
        if (message == "Success")
        {
            await LocalStorageService.SetItemAsStringAsync("IsAuthenticated", "true");
            NavigationManager.NavigateTo(NavigationManager.Uri, true);
        }
        else
        {
            _error = "Invalid or unprivileged access";
            _processing = false;
        }
    }

    private string CapitaliseName(string name)
    {
        var parts = name.Split('-');
        if (parts.Length != 2) return name;
        var secondPart = parts[1][..1].ToUpper() + parts[1][1..];
        var lastChar = secondPart[^1].ToString().ToUpper();
        secondPart = secondPart[..^1] + lastChar;
        return secondPart;
    }
}
