@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorageService
@inject IApiService ApiLogic
@inject SystemService SystemService
@inherits LayoutComponentBase

<MudThemeProvider Theme="_theme"/>
<MudDialogProvider/>
<MudSnackbarProvider/>
<MudBreakpointProvider/>

<MudLayout Style="height: 100vh">
    <MudAppBar Elevation="2" Dense="true" Class="d-flex">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="DrawerToggle"/>
        <MudText Typo="Typo.h5" Class="ml-3">ISI Patch</MudText>
        <MudSpacer/>
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Link="https://github.com/Ayymoss/IS-Ivanti" Target="_blank"/>
        @if (_user is not null)
        {
            <MudButton Class="ml-2" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Logout" Size="Size.Small" OnClick="Logout" Color="Color.Error">@_role: @_user</MudButton>
        }
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu/>
    </MudDrawer>
    <MudMainContent Style="height: 100%">
        <MudStack Style="height: 100%">
            <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="my-4 py-4">
                @Body
            </MudContainer>
            <MudSpacer/>
            @if (_systemMessage?.Message is not null)
            {
                <MudAlert Class="ma-2"
                          Severity="_systemMessage.Severity"
                          ContentAlignment="HorizontalAlignment.Center">
                    @_systemMessage.Message
                </MudAlert>
            }
        </MudStack>
    </MudMainContent>
</MudLayout>

@code {
    private readonly MudTheme _theme = ISIvanti.Client.Theme.Theme.Primary();
    private bool _drawerOpen = true;
    private void DrawerToggle() => _drawerOpen = !_drawerOpen;
    private string? _user;
    private SystemMessageDto? _systemMessage;
    private string? _role;

    protected override async Task OnInitializedAsync()
    {
        _systemMessage = await SystemService.GetSystemMessage() ?? new SystemMessageDto();
        var user = (await (AuthStateProvider as CustomAuthStateProvider)!.GetAuthenticationStateAsync()).User;
        _user = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value;
        _role = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value;
    }

    private async Task Logout()
    {
        var response = await ApiLogic.LogoutAsync();
        if (response == "Success")
        {
            (AuthStateProvider as CustomAuthStateProvider)?.ClearAuthInfo();
            await LocalStorageService.RemoveItemAsync("IsAuthenticated");
            NavigationManager.NavigateTo(NavigationManager.Uri, true);
        }
    }

}
